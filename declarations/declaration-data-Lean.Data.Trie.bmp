{"name":"Lean.Data.Trie","instances":[{"typeNames":["Lean.Parser.Trie"],"name":"Lean.Parser.Trie.instEmptyCollectionTrie","className":"EmptyCollection"},{"typeNames":["Lean.Parser.Trie"],"name":"Lean.Parser.Trie.instInhabitedTrie","className":"Inhabited"},{"typeNames":["Lean.Parser.Trie"],"name":"Lean.Parser.Trie.instToStringTrie","className":"ToString"}],"imports":["Init","Lean.Data.Format"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L105-L106","name":"Lean.Parser.Trie.instToStringTrie","line":105,"kind":"instance","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.instToStringTrie","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.instToStringTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">instToStringTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> (<span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L88-L98","name":"Lean.Parser.Trie.matchPrefix.loop","line":88,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.matchPrefix.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.matchPrefix.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">matchPrefix</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L87-L99","name":"Lean.Parser.Trie.matchPrefix","line":87,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.matchPrefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.matchPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">matchPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L76-L80","name":"Lean.Parser.Trie.findPrefix.collect","line":76,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.findPrefix.collect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.findPrefix.collect\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">findPrefix</span>.<span class=\"name\">collect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>) <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L66-L74","name":"Lean.Parser.Trie.findPrefix.go","line":66,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.findPrefix.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.findPrefix.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">findPrefix</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>) <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L63-L80","name":"Lean.Parser.Trie.findPrefix","line":63,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.findPrefix","doc":"Return values that match the given `prefix` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.findPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">findPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L50-L59","name":"Lean.Parser.Trie.find?.loop","line":50,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.find?.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.find?.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">find?</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L49-L60","name":"Lean.Parser.Trie.find?","line":49,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.find?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.find?\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L36-L46","name":"Lean.Parser.Trie.insert.loop","line":36,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.insert.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.insert.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">insert</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L29-L35","name":"Lean.Parser.Trie.insert.insertEmpty","line":29,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.insert.insertEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.insert.insertEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">insert</span>.<span class=\"name\">insertEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L28-L47","name":"Lean.Parser.Trie.insert","line":28,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L25-L26","name":"Lean.Parser.Trie.instInhabitedTrie","line":25,"kind":"instance","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.instInhabitedTrie","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.instInhabitedTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">instInhabitedTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L22-L23","name":"Lean.Parser.Trie.instEmptyCollectionTrie","line":22,"kind":"instance","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.instEmptyCollectionTrie","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.instEmptyCollectionTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">instEmptyCollectionTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> (<span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L19-L20","name":"Lean.Parser.Trie.empty","line":19,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L14-L14","name":"Lean.Parser.Trie.Node","line":14,"kind":"ctor","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie.Node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie.Node\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span>.<span class=\"name\">Node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/RBMap.html#Lean.RBNode\">Lean.RBNode</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <span class=\"fn\">fun <span class=\"fn\">x</span> =&gt <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span></span></span>) → <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\">Lean.Parser.Trie</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Lean/Data/Trie.lean#L13-L14","name":"Lean.Parser.Trie","line":13,"kind":"inductive","docLink":"./Lean/Data/Trie.html#Lean.Parser.Trie","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Parser.Trie\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Trie</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}