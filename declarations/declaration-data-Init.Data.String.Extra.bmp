{"name":"Init.Data.String.Extra","instances":[],"imports":["Init.Control.Except","Init.Data.ByteArray","Init.SimpLemmas","Init.Data.Nat.Linear","Init.Util","Init.WFTactics"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Init/Data/String/Extra.lean#L56-L62","name":"String.Iterator.foldUntil","line":56,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.Iterator.foldUntil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.foldUntil\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">foldUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Init/Data/String/Extra.lean#L51-L54","name":"String.Iterator.find","line":51,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.Iterator.find","doc":"Advance the given iterator until the predicate returns true or the end of the string is reached. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.find\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">find</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Init/Data/String/Extra.lean#L42-L44","name":"String.Iterator.sizeOf_next_lt_of_atEnd","line":42,"kind":"theorem","docLink":"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">sizeOf_next_lt_of_atEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.atEnd\">String.Iterator.atEnd</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> (<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">String.Iterator.next</a> <span class=\"fn\">i</span></span>)</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Init/Data/String/Extra.lean#L36-L38","name":"String.Iterator.sizeOf_next_lt_of_hasNext","line":36,"kind":"theorem","docLink":"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_hasNext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_hasNext\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">sizeOf_next_lt_of_hasNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> (<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">String.Iterator.next</a> <span class=\"fn\">i</span></span>)</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Init/Data/String/Extra.lean#L34-L34","name":"String.toUTF8","line":34,"kind":"opaque","docLink":"./Init/Data/String/Extra.html#String.toUTF8","doc":"Convert the given `String` to a [UTF-8](https://en.wikipedia.org/wiki/UTF-8) encoded byte array. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.toUTF8\"><span class=\"name\">String</span>.<span class=\"name\">toUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Init/Data/String/Extra.lean#L30-L30","name":"String.fromUTF8Unchecked","line":30,"kind":"opaque","docLink":"./Init/Data/String/Extra.html#String.fromUTF8Unchecked","doc":"Convert a [UTF-8](https://en.wikipedia.org/wiki/UTF-8) encoded `ByteArray` string to `String`.\nThe result is unspecified if `a` is not properly UTF-8 encoded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.fromUTF8Unchecked\"><span class=\"name\">String</span>.<span class=\"name\">fromUTF8Unchecked</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/339615042d9053f184393f73ef955fbdc3cd12bd/src/Init/Data/String/Extra.lean#L19-L23","name":"String.toNat!","line":19,"kind":"def","docLink":"./Init/Data/String/Extra.html#String.toNat!","doc":"Interpret the string as the decimal representation of a natural number.\n\nPanics if the string is not a string of digits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.toNat!\"><span class=\"name\">String</span>.<span class=\"name\">toNat!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"}]}